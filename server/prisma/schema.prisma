// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id       Int    @id @default(autoincrement()) @map("role_id")
  roleName String @map("role_name")
  users    User[]
}

model Gender {
  id         Int    @id @default(autoincrement()) @map("gender_id")
  genderName String @map("gender_name")
  users      User[]
}

model AttendanceLog {
  id         Int      @id @default(autoincrement())
  student    User     @relation(fields: [studentId], references: [id])
  studentId  Int      @map("student_id")
  date       DateTime @default(now())
  status     String   // attended, not_attended, with_report, day_off
  note       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Sport {
  id        Int      @id @default(autoincrement())
  sportName String   @map("sport_name")
  classes   Class[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Class {
  id            Int             @id @default(autoincrement())
  teacherId     Int            @map("teacher_id")
  sportId       Int            @map("sport_id")
  section       String
  sport         Sport          @relation(fields: [sportId], references: [id])
  teacher       User           @relation("TeacherClasses", fields: [teacherId], references: [id])
  coaches       ClassCoach[]
  students      ClassStudent[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model ClassCoach {
  id        Int      @id @default(autoincrement())
  classId   Int      @map("class_id")
  coachId   Int      @map("coach_id")
  class     Class    @relation(fields: [classId], references: [id])
  coach     User     @relation("CoachClasses", fields: [coachId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([classId, coachId])
}

model ClassStudent {
  id        Int      @id @default(autoincrement())
  classId   Int      @map("class_id")
  studentId Int      @map("student_id")
  class     Class    @relation(fields: [classId], references: [id])
  student   User     @relation("StudentClasses", fields: [studentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([classId, studentId])
}

model User {
  id                      Int            @id @default(autoincrement())
  firstName              String?
  lastName               String?
  email                  String         @unique
  password               String?        // Made optional for email activation flow
  birthDate             String?
  parentName            String?
  parentPhone           String?
  role                   Role           @relation(fields: [roleId], references: [id])
  roleId                 Int            @map("role_id")
  gender                 Gender?        @relation(fields: [genderId], references: [id])
  genderId               Int?           @map("gender_id")
  profileImage           String?        // can be null
  active                 Boolean        @default(false)
  passwordResetToken     String?        // For password setup/reset
  passwordResetExpires   DateTime?      // Token expiration
  passwordChangedAt      DateTime       @default(now())
  preferences            Json?
  notificationPreferences Json?
  attendanceLogs         AttendanceLog[]

  // Relationships for different roles
  teacherClasses         Class[]        @relation("TeacherClasses")
  coachClasses          ClassCoach[]    @relation("CoachClasses")
  studentClasses        ClassStudent[]  @relation("StudentClasses")

  // Student specific fields
  notes                 String?
  startDate             DateTime?
  performanceNotes      Json?

  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
}
