generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id       Int    @id @default(autoincrement()) @map("role_id")
  roleName String @map("role_name")
  users    User[]
}

model Gender {
  id         Int    @id @default(autoincrement()) @map("gender_id")
  genderName String @map("gender_name")
  users      User[]
}

model AttendanceLog {
  id             Int          @id @default(autoincrement())
  classStudentId Int          @map("class_student_id")
  date           DateTime     @default(now())
  status         String
  note           String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  classStudent   ClassStudent @relation(fields: [classStudentId], references: [id])

  @@unique([classStudentId, date], map: "class_student_id_date")
}

model Sport {
  id        Int      @id @default(autoincrement())
  sportName String   @map("sport_name")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  classes   Class[]
}

model Class {
  id        Int            @id @default(autoincrement())
  sportId   Int            @map("sport_id")
  section   String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  sport     Sport          @relation(fields: [sportId], references: [id])
  coaches   ClassCoach[]
  students  ClassStudent[]
}

model ClassCoach {
  id        Int      @id @default(autoincrement())
  classId   Int      @map("class_id")
  coachId   Int      @map("coach_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  class     Class    @relation(fields: [classId], references: [id])
  coach     User     @relation("CoachClasses", fields: [coachId], references: [id])

  @@unique([classId, coachId])
}

model ClassStudent {
  id             Int             @id @default(autoincrement())
  classId        Int             @map("class_id")
  studentId      Int             @map("student_id")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  attendanceLogs AttendanceLog[]
  class          Class           @relation(fields: [classId], references: [id])
  student        User            @relation("StudentClasses", fields: [studentId], references: [id])

  @@unique([classId, studentId])
}

model User {
  id                      Int                    @id @default(autoincrement())
  firstName               String?
  lastName                String?
  email                   String                 @unique
  password                String?
  birthDate               String?
  parentName              String?
  parentPhone             String?
  roleId                  Int                    @map("role_id")
  genderId                Int?                   @map("gender_id")
  profileImage            String?
  active                  Boolean                @default(false)
  passwordResetToken      String?
  passwordResetExpires    DateTime?
  passwordChangedAt       DateTime               @default(now())
  preferences             Json?
  notificationPreferences Json?
  notes                   String?
  startDate               DateTime?
  performanceNotes        Json?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  coachClasses            ClassCoach[]           @relation("CoachClasses")
  studentClasses          ClassStudent[]         @relation("StudentClasses")
  financialTransactions   FinancialTransaction[]
  gender                  Gender?                @relation(fields: [genderId], references: [id])
  role                    Role                   @relation(fields: [roleId], references: [id])
}

model FinancialTransaction {
  id               Int      @id @default(autoincrement())
  transaction_type String
  user_id          Int?
  amount           Float
  currency         String
  description      String
  transaction_date DateTime
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  user             User?    @relation(fields: [user_id], references: [id])
}

model AuthLog {
  id              Int      @id @default(autoincrement())
  email           String
  status          String   // "success" or "fail"
  ip_address      String
  user_agent      String
  failure_reason  String?
  created_at      DateTime @default(now())
}
